ylab("Lower stem damaged biomass (kg)") +
theme(legend.position = "none")
dam_dbh <- ggpredict(mod.B, terms = c("dbh_cm", "wd"), back.transform = TRUE)# %>% plot(add.data = TRUE)
tr <- ggplot(frustrum, aes(x = dbh_cm, y = log(mp_damaged_kg))) +
geom_jitter(aes(color = wd)) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
colour = low
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
alpha = 0.2,
fill = low
) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
colour = mid
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
alpha = 0.2,
fill = mid
) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
colour = high
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
alpha = 0.2,
fill = high
) +
theme_classic() +
scale_color_manual(values = custom_colors_wd) +
xlab("Tree DBH (cm)") +
ylab("Lower stem damaged biomass (kg)") +
theme(legend.position = "none")
tr
# Generate predictions with back-transformed y-axis
dam_dbh <- ggpredict(mod.B, terms = c("dbh_cm", "wd"), back.transform = TRUE)
# Plot
tr <- ggplot(frustrum, aes(x = dbh_cm, y = mp_damaged_kg)) +
geom_jitter(aes(color = wd)) +
geom_line(
aes(x = x, y = predicted),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
colour = low
) +
geom_ribbon(
aes(x = x, ymin = conf.low, ymax = conf.high),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
alpha = 0.2,
fill = low
) +
geom_line(
aes(x = x, y = predicted),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
colour = mid
) +
geom_ribbon(
aes(x = x, ymin = conf.low, ymax = conf.high),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
alpha = 0.2,
fill = mid
) +
geom_line(
aes(x = x, y = predicted),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
colour = high
) +
geom_ribbon(
aes(x = x, ymin = conf.low, ymax = conf.high),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
alpha = 0.2,
fill = high
) +
theme_classic() +
scale_color_manual(values = custom_colors_wd) +
xlab("Tree DBH (cm)") +
ylab("Lower stem damaged biomass (kg)") +
theme(legend.position = "none")
tr
# Damage ~ species
sp <- ggplot(frustrum, aes(x = species, y = mp_damaged_kg, fill = species))+
geom_boxplot()+
theme_classic()+
scale_fill_manual(values = custom_colors)+
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
xlab("") +
ylab("Lower stem damaged biomass (kg)")+
theme(legend.position = "none")
# Damage ~ traits
frustrum$wd <- as.factor(frustrum$wd)
dam_dbh <- ggpredict(mod.B, terms = c("dbh_cm", "wd"), back.transform = TRUE)# %>% plot(add.data = TRUE)
tr <- ggplot(frustrum, aes(x = dbh_cm, y = log(mp_damaged_kg))) +
geom_jitter(aes(color = wd)) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
colour = low
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.7405'),
inherit.aes = FALSE,
alpha = 0.2,
fill = low
) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
colour = mid
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.8453'),
inherit.aes = FALSE,
alpha = 0.2,
fill = mid
) +
geom_line(
aes(x = x, y = log(predicted)),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
colour = high
) +
geom_ribbon(
aes(x = x, ymin = log(conf.low), ymax = log(conf.high)),
data = filter(dam_dbh, group == '0.977'),
inherit.aes = FALSE,
alpha = 0.2,
fill = high
) +
theme_classic() +
scale_color_manual(values = custom_colors_wd) +
xlab("Tree DBH (cm)") +
ylab("Lower stem damaged biomass (kg)") +
theme(legend.position = "none")
# Damage ~ external factors
term <- ggplot(frustrum, aes(x = termite_pres.x, y = mp_damaged_kg, fill = termite_pres.x))+
geom_boxplot()+
theme_classic() +
xlab("External termite presence") +
ylab("Lower stem damaged biomass (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
fire <- ggplot(frustrum, aes(x = fire.x, y = mp_damaged_kg, fill = fire.x))+
geom_boxplot()+
theme_classic() +
xlab("External fire scarring") +
ylab("Lower stem damaged biomass (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
ggarrange(sp, tr, term, fire, ncol = 2, nrow = 2)
View(x)
v <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2.csv")
View(v)
# form
v$volume_cm3 <-  (pi * v$H / 3) * (v$D1^2 + v$D1 * v$D2 + v$D2^2)
# form
v$volume_cm3 <-  (pi * v$Length / 3) * (v$D1^2 + v$D1 * v$D2 + v$D2^2)
# form
v$volume_cm3 <-  (pi * v$Length / 3) * ((v$D1/2)^2 + (v$D1/2) * (v$D2/2) + (v$D2/2)^2)
# form
v$R1 <- v$D1/2
V$R2 <- v$D2/2
v$volume_cm3 <-  (pi * v$Length / 3) * (v$R1^2 + v$R1 * v$R2 + v$R2^2)
v$R1 <- v$D1/2
V$R2 <- v$D2/2
# form
v$R1 <- v$D1/2
v$R2 <- v$D2/2
v$volume_cm3 <-  (pi * v$Length / 3) * (v$R1^2 + v$R1 * v$R2 + v$R2^2)
v <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2.csv")
# form
v$R1 <- v$D1/2
v$R2 <- v$D2/2
v$volume_cm3 <-  (pi * v$Length / 3) * (v$R1^2 + v$R1 * v$R2 + v$R2^2)
v$volume_cm3 <-  (pi * v$Length / 3) * (v$D1^2 + v$D1 * v$D2 + v$D2^2)
v <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2.csv")
# form
v$R1 <- v$D1/2
v$R2 <- v$D2/2
v$volume_cm3 <-  (pi * v$Length / 3) * (v$R1^2 + v$R1 * v$R2 + v$R2^2)
# volume in m3
v$volume_m3 <- v$volume_cm3 / 1000000
write.csv("v", "/Users/abbeyyatsko/Downloads/Salesman_V2.csv", row.names = FALSE)
v <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2 (1).csv")
# form
v$R1 <- v$D1/2
v$R2 <- v$D2/2
v$volume_cm3 <-  (pi * v$Length / 3) * (v$R1^2 + v$R1 * v$R2 + v$R2^2)
# volume in m3
v$volume_m3 <- v$volume_cm3 / 1000000
View(v)
write.csv("v", "/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded.csv", row.names = FALSE)
write.csv(v, "/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded.csv", row.names = FALSE)
v$volume_l <- v$volume_m3 * 1000
View(v)
write.csv(v, "/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded.csv", row.names = FALSE)
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2 (1).csv")
View(vol)
vol <- read.csv("Salesman_V2_volumesadded.csv")
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded.csv")
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded.csv (2)")
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded(2).csv")
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded (2).csv")
vol$dif <- vol$volume_l_baptiste - vol$volume_litres_model
vol$dif <- vol$volume_litres_model - vol$volume_l_baptiste
vol$dif_p <- ((vol$volume_litres_model - vol$volume_l_baptiste) / vol$volume_litres_model)*100
# plot dif_p by length
ggplot(vol, aes(x = Length, y = dif_p)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "Difference in Volume by Length", x = "Length", y = "Difference in Volume (%)")
# plot dif_p by average R
vol$avg_R <- (vol$R1 + vol$R2) / 2
ggplot(vol, aes(x = avg_R, y = dif_p)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "Difference in Volume by Radius", x = "Average Radius", y = "Difference in Volume (%)")
# look at small things only
ggplot(vol, aes(x = avg_R, y = dif_p)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "Difference in Volume by Radius", x = "Average Radius", y = "Difference in Volume (%)")+
xlim(0, 15)
# look at small things only
ggplot(vol, aes(x = avg_R, y = dif_p)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(title = "Difference in Volume by Radius", x = "Average Radius", y = "Difference in Volume (%)")+
xlim(0, 20)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)+
xlim(0,1000)+
ylim(0,1000)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)+
xlim(0,5000)+
ylim(0,5000)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)+
xlim(0,2000)+
ylim(0,2000)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)+
xlim(0,200)+
ylim(0,200)
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red")+
xlim(0,200)+
ylim(0,200)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red", type = "dashed")+
xlim(0,200)+
ylim(0,200)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")+
xlim(0,200)+
ylim(0,200)
# regression correlation
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
library(plotly)
# regression correlation
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
ggplotly(p, tooltip = "text")
ggplotly(p)
# regression correlation
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point(aes(text = paste("Tree number:", Tree_number))) +  # Add tooltip info
geom_smooth(method = "lm") +
theme_minimal()+
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
ggplotly(p, tooltip = "text")
ggplotly(p)
vol <- read.csv("/Users/abbeyyatsko/Downloads/Salesman_V2_volumesadded (2).csv")
vol$dif <- vol$volume_litres_model - vol$volume_l_baptiste
vol$dif_p <- ((vol$volume_litres_model - vol$volume_l_baptiste) / vol$volume_litres_model)*100
p
interactive_plot <- interactive_plot %>%
highlight(on = "plotly_click", off = "plotly_deselect", color = "red")
interactive_plot <- p %>%
highlight(on = "plotly_click", off = "plotly_deselect", color = "red")
interactive_plot
interactive_plot <- ggplotly(p, tooltip = "text")
interactive_plot <- interactive_plot %>%
highlight(on = "plotly_click", off = "plotly_deselect", color = "red")
interactive_plot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model)) +
geom_point(aes(text = paste("Tree number:", Tree_number)), size = 4) +  # Add tooltip info
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
# Convert ggplot to plotly
interactive_plot <- ggplotly(p, tooltip = "text")
# Add the ability to change color on click
interactive_plot <- interactive_plot %>%
highlight(on = "plotly_click", off = "plotly_deselect", color = "red")
# Display the interactive plot
interactive_plot
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, text = paste("Tree number:", Tree_number))) +
geom_point(aes(color = factor(Tree_number)), size = 4) +  # Set color by Tree_number
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
# Convert ggplot to plotly
interactive_plot <- ggplotly(p, tooltip = "text")
# Function to handle click event and change color
interactive_plot <- interactive_plot %>%
layout(
hovermode = "closest",
dragmode = "zoom"
) %>%
onRender("
function(el, x) {
el.on('plotly_click', function(eventData){
var traceIndex = eventData.points[0].pointIndex;  // Get the index of clicked point
var currentColor = eventData.points[0].data.marker.color[traceIndex];  // Get current color
var newColor = currentColor === 'red' ? 'blue' : 'red';  // Toggle color between red and blue
// Change the color of the clicked point
var update = {
'marker.color': {
[traceIndex]: newColor
}
};
Plotly.restyle(el, update, [0]);
});
}
")
# Display the interactive plot
interactive_plot
interactive_plot
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, text = paste("Tree number:", Tree_number))) +
geom_point(aes(color = factor(Tree_number)), size = 3) +  # Set color by Tree_number
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
# Convert ggplot to plotly
interactive_plot <- ggplotly(p, tooltip = "text")
interactive_plot
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, text = paste("Tree number:", Tree_number))) +
geom_point(aes(color = factor(Tree_number)), size = 2) +  # Set color by Tree_number
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
# Convert ggplot to plotly
interactive_plot <- ggplotly(p, tooltip = "text")
interactive_plot
vol$Tree_number <- as.factor(vol$Tree_number)  # Ensure Tree_number is a factor
ts_numbers <- c(86, 64, 74, 158, 20, 162, 15, 171, 61, 35, 146, 63)
vol$color <- ifelse(vol$Tree_number %in% highlighted_tree_numbers, "red", "gray")  # Color those numbers red
vol$color <- ifelse(vol$Tree_number %in% ts_numbers, "red", "gray")  # Color those numbers red
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, color = color)) +
geom_point(size = 4) +  # Size of the points
scale_color_manual(values = c("red", "gray")) +  # Apply color scale
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
# Convert ggplot to plotly
ggplotly(p, tooltip = "text")
ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, color = color)) +
geom_point(size = 4) +  # Size of the points
scale_color_manual(values = c("red", "gray")) +  # Apply color scale
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
vol$color <- ifelse(vol$Tree_number %in% ts_numbers, "gray", "red")  # Color those numbers red
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, color = color)) +
geom_point(size = 4) +  # Size of the points
scale_color_manual(values = c("red", "gray")) +  # Apply color scale
geom_smooth(method = "lm") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
p
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, color = color)) +
geom_point(size = 4) +  # Size of the points
scale_color_manual(values = c("red", "gray")) +  # Apply color scale
geom_smooth(method = "lm", color = "black") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
p
# Create the ggplot
p <- ggplot(vol, aes(x = volume_l_baptiste, y = volume_litres_model, color = color)) +
geom_point(size = 4) +  # Size of the points
scale_color_manual(values = c("red", "gray")) +  # Apply color scale
geom_smooth(method = "lm", color = "black") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")+
theme(legend.position = "none")
p
