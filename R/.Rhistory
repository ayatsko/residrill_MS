a <- ggplot(myrt, aes(x = species, y = linear_mean, fill = species)) +
geom_boxplot() +
geom_point()+
theme_classic() +
scale_fill_brewer(palette = "Set3") +
xlab("") +
ylab("Proportion damaged") +
theme(legend.position = "none") +
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
scale_fill_manual(values = custom_colors)
# b) visualize species differences - area
b <- ggplot(myrt, aes(x = species, y = V_xsection_cm3_damaged, fill = species)) +
geom_boxplot() +
geom_point()+
theme_classic() +
scale_fill_brewer(palette = "Set3") +
xlab("") +
ylab("Damaged area (cm2)")  +
theme(legend.position = "none") +
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
scale_fill_manual(values = custom_colors)
# c) relationship between proportion damage and tree species at different heights
prop1 <- ggpredict(m.1, terms = c("drill_height_cm", "species"))
plot(prop1, add.data = TRUE)+
labs(x = "Drill height (cm)", y = "Proportion damaged", title = "Predicted proportion damage")
c <- ggplot(myrt, aes(x = drill_height_cm, y = linear_mean, color = species)) +
geom_jitter() +
theme_classic() +
xlab("Drill height (cm)") +
ylab("Proportion damaged") +
theme(legend.position = "none") +
scale_color_manual(values = custom_colors)
# d) relationship between area damage and tree species at different heights
area <- ggpredict(m.2, terms = c("drill_height_cm", "species"))
plot(area, add.data = TRUE)+
labs(x = "Drill height (cm)", y = "Absolute damaged area (cm2)", title = "Predicted absoute area damage")
d <- ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = species)) +
geom_jitter() +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='Corymbia clarksoniana'),
inherit.aes=FALSE, colour= h) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='Corymbia clarksoniana'),
inherit.aes=FALSE,  alpha=0.2, fill = h) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='Eucalyptus cullenii'),
inherit.aes=FALSE, colour= m) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='Eucalyptus cullenii'),
inherit.aes=FALSE,  alpha=0.2, fill = m)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='Melaleuca stenostachya'),
inherit.aes=FALSE, colour= l) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='Melaleuca stenostachya'),
inherit.aes=FALSE,  alpha=0.2, fill = l)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("Damaged area (cm2)")+
scale_color_manual(values = custom_colors)
# e)
e <- ggplot(myrt, aes(x = drill_height_cm, y = linear_mean)) +
geom_jitter() +
theme_classic() +
xlab("Drill height (cm)") +
ylab("Proportion damaged")
# f) relationship between area damage and height in tree by size
area <- ggpredict(m.4, terms = c("drill_height_cm [all]", "dbh_cm.x [v]"), back.transform = TRUE) # %>% plot(add.data = TRUE)
f <- ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = dbh_cm.x)) +
geom_jitter() +
scale_colour_gradient2(low=low, mid=mid, midpoint = 30 , high=high, name ='DBH') +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='10'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='10'),
inherit.aes=FALSE,  alpha=0.2, fill = low) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='25'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='25'),
inherit.aes=FALSE,  alpha=0.2, fill = mid)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='34'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='34'),
inherit.aes=FALSE,  alpha=0.2, fill = high)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("Damaged area (cm2)")
(a+b)/(c+d)/(e+f) + plot_annotation(tag_levels = "a")
# generate list of all trees
ids <- unique(myrt$tree_site_ID)
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb$mp_damaged_prop <- frustrum_agb$mp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum_agb, cols = sp_damaged_kg:mp_damaged_kg)
# check normality assumptions
differences <- frustrum_agb$sp_damaged_kg - frustrum_agb$mp_damaged_kg
qqnorm(differences)
qqline(differences, col = "blue")
shapiro.test(differences) # breaks normality assumption
# nonparametric t-test
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
# visualization
frustrum_agb_long %>% group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) -> df
ggplot(df, aes(x = name, y = mean, fill = name))+
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.07)+
theme_classic()+
ylab("AGB in frustrum (kg)")+
xlab("")+
theme(legend.position="none")
# merge in presence/absence data for termite/fire presence
tree_damage <- tree_level_damage_myrt[c("tree_site_ID", "site", "termite_pres", "mound", "runway", "termite", "fire")]
frustrum <- left_join(frustrum_agb, tree_damage, by = c("tree_site_ID", "site"))
# Damage ~ species
mod.A <- lmer(log(mp_damaged_kg) ~ species + (1|site), REML = F, data = frustrum)
Anova(mod.A)
# check_model(mod.A)
ggpredict(mod.A, terms = c("species"))  %>% plot(add.data = TRUE)
# posthoc pairwise tukey HSD to determine what species had differences
x <- emmeans(mod.A, ~species)
y <- pairs(x, adjust="tukey")
# post hoc test for which species are different
# estimated marginal means
emms <- emmeans(mod.A, ~ species)
pairwise_comparisons_tukey <- pairs(emms, adjust = "tukey")
summary(pairwise_comparisons_tukey)
# Damage ~ traits
mod.B <- lmer(log(mp_damaged_kg) ~ dbh_cm + wd + (1|site), REML = F, data = frustrum)
Anova(mod.B)
#check_model(mod.B)
dam_dbh <- ggpredict(mod.B, terms = c("dbh_cm", "wd"))# %>% plot(add.data = TRUE)
# Damage ~ external factors
mod.C <- lmer(log(mp_damaged_kg) ~ fire*termite_pres + (1|site), data = frustrum)
Anova(mod.C)
#check_model(mod.C)
ggpredict(mod.C, terms = c("termite_pres"))  %>% plot(add.data = TRUE)
# Damage ~ species
sp <- ggplot(frustrum, aes(x = species, y = mp_damaged_kg, fill = species))+
geom_boxplot()+
theme_classic()+
scale_fill_manual(values = custom_colors)+
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
xlab("") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")
# Damage ~ traits
frustrum$wd <- as.factor(frustrum$wd)
tr <- ggplot(frustrum, aes(x = dbh_cm, y = log(mp_damaged_kg), color = wd)) +
geom_jitter() +
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.7405'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.7405'),
inherit.aes=FALSE,  alpha=0.2, fill = low)+
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.8453'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.8453'),
inherit.aes=FALSE,  alpha=0.2, fill = mid) +
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.977'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.977'),
inherit.aes=FALSE,  alpha=0.2, fill = high) +
theme_classic() +
scale_color_manual(values = custom_colors_wd) +
xlab("Tree DBH (cm)") +
ylab("Total damaged biomass in lower stem (kg)")
# Damage ~ external factors
term <- ggplot(frustrum, aes(x = termite_pres, y = mp_damaged_kg, fill = termite_pres))+
geom_boxplot()+
theme_classic() +
xlab("External termite presence") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
fire <- ggplot(frustrum, aes(x = fire, y = mp_damaged_kg, fill = fire))+
geom_boxplot()+
theme_classic() +
xlab("External fire scarring") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
(sp+tr) / (term+fire) + plot_annotation(tag_levels = "a")
ggplot(frustrum, aes(x = species, y = mp_damaged_kg, fill = species))+
geom_boxplot()+
theme_classic()+
scale_fill_manual(values = custom_colors)+
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
xlab("") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")
View(frustrum)
min(frustrum$dbh_cm)
max(frustrum$dbh_cm)
contingency_table_term
# binomial model - define coding
myrt$termite_num <- ifelse(myrt$termite_pres == "Y", 1, 0)
myrt$mound_num <- ifelse(myrt$mound == "Y", 1, 0)
myrt$runway_num <- ifelse(myrt$runway == "Y", 1, 0)
myrt$termitesampled_num <- ifelse(myrt$termite == "Y", 1, 0)
myrt$fire_num <- ifelse(myrt$fire == "Y", as.integer(1), as.integer(0))
myrt %>%
group_by(tree_site_ID, species, site) %>%
distinct(dbh_cm.x, wd, fire_num, termite_num, mound_num, runway_num, termitesampled_num)-> pp
# external damage ~ species (chi square)
#pp$termite_num <- as.factor(pp$termite_num)
#pp$fire_num <- as.factor(pp$fire_num)
contingency_table_term <- table(pp$species, pp$termite_num)
chi_term <- chisq.test(contingency_table_term, correct = TRUE)
# There is a significant difference in termite presence across the species
contingency_table_fire <- table(pp$species, pp$fire_num)
chi_fire <- chisq.test(contingency_table_fire, correct = TRUE)
# There is no significant difference in fire presence across the species
# external damage ~ traits
term_dbh <- glm(termite_num ~ dbh_cm.x, data = pp, family = binomial(logit))
#summary(term_dbh)
Anova(term_dbh)
ggpredict(term_dbh, terms = c("dbh_cm.x"))  %>% plot(add.data = TRUE)
term_wd <- glm(termite_num ~ wd , data = pp, family = binomial("logit"))
#summary(term_wd)
Anova(term_wd)
ggpredict(term_wd, terms = c("wd")) %>% plot(add.data = TRUE)
fire_dbh <- glm(fire_num ~ dbh_cm.x, data = pp, family = binomial(logit))
#summary(fire_dbh)
Anova(fire_dbh)
ggpredict(fire_dbh, terms = c("dbh_cm.x"))  %>% plot(add.data = TRUE)
fire_wd <- glm(fire_num ~ wd , data = pp, family = binomial("logit"))
summary(fire_wd)
Anova(fire_wd)
ggpredict(fire_wd, terms = c("wd")) %>% plot(add.data = TRUE)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(lme4)
library(easystats)
library(multcompView)
library(ggeffects)
library(nlme)
library(stats)
library(car)
library(ggpmisc)
library(glmmTMB)
library(patchwork)
library(emmeans)
load("/Users/abbeyyatsko/Desktop/repos/residrill_MS/R/Rdata/tree_level_damage_myrt.RData")
load("/Users/abbeyyatsko/Desktop/repos/residrill_MS/R/Rdata/myrt.RData")
agb <- read.csv("/Users/abbeyyatsko/Desktop/repos/residrill_MS/data/site_agb.csv")
pnw_stems <- read.csv("/Users/abbeyyatsko/Desktop/repos/residrill_MS/data/pnw_biomass.csv")
# relevel species
myrt$species <- fct_relevel(myrt$species, "Corymbia clarksoniana", "Eucalyptus cullenii", "Melaleuca stenostachya")
# define area of slice 1cm thick at each measurement point
myrt$V_xsection_cm3 <- ((myrt$drill_dbh_cm/2)^2)*(pi)*(1)
myrt$V_xsection_cm3_damaged <- myrt$V_xsection_cm3 * myrt$linear_mean
# set graphing parameters/colors
v <- c(10, 25, 34)
low <- "#a3dfba"
mid <- '#347aa3'
high <- '#1f1120'
h <- "#A50026"
m <- '#F99858'
l <- '#364B9A'
custom_colors <- c("Corymbia clarksoniana" = "#A50026", "Eucalyptus cullenii" = "#F99858", "Melaleuca stenostachya" = "#364B9A")
colors <- c("Y" = "#a3dfba", "N" = "#347aa3")
custom_colors_wd <- c("0.7405" = "#a3dfba", "0.8453" = "#347aa3", "0.977" = "#1f1120")
# model 1. relationship between proportion damage and tree species
m.1 <- glmmTMB(linear_mean ~ drill_height_cm  + species + (1|tree_site_ID) + (1|site), myrt, family=list(family="beta",link="logit"))
#summary(m.1)
#check_model(m.1)
Anova(m.1)
# model 2. relationship between area damage and tree species
m.2 <- lmer(log(V_xsection_cm3_damaged) ~ drill_height_cm + species + (1|tree_site_ID) + (1|site), REML = F, data = myrt)
#summary(m.2)
#check_model(m.2)
Anova(m.2)
# model 3. relationship between proportion damage and height in tree by DBH + wd
m.3 <- glmmTMB(linear_mean ~ drill_height_cm  + dbh_cm.x + wd + (1|tree_site_ID) + (1|site), myrt, family=list(family="beta",link="logit"))
#summary(m.3)
#check_model(m.3)
Anova(m.3)
# model 4. relationship between area damage and height in tree by DBH + wd
m.4 <- lmer(log(V_xsection_cm3_damaged) ~ drill_height_cm + dbh_cm.x + wd + (1|tree_site_ID) + (1|site), REML = F, data = myrt)
#summary(m.4)
#check_model(m.4)
Anova(m.4)
# generate list of all trees
ids <- unique(myrt$tree_site_ID)
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb$mp_damaged_prop <- frustrum_agb$mp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum_agb, cols = sp_damaged_kg:mp_damaged_kg)
# check normality assumptions
differences <- frustrum_agb$sp_damaged_kg - frustrum_agb$mp_damaged_kg
qqnorm(differences)
qqline(differences, col = "blue")
shapiro.test(differences) # breaks normality assumption
# nonparametric t-test
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
# visualization
frustrum_agb_long %>% group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) -> df
ggplot(df, aes(x = name, y = mean, fill = name))+
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.07)+
theme_classic()+
ylab("AGB in frustrum (kg)")+
xlab("")+
theme(legend.position="none")
# merge in presence/absence data for termite/fire presence
tree_damage <- tree_level_damage_myrt[c("tree_site_ID", "site", "termite_pres", "mound", "runway", "termite", "fire")]
frustrum <- left_join(frustrum_agb, tree_damage, by = c("tree_site_ID", "site"))
# Damage ~ species
mod.A <- lmer(log(mp_damaged_kg) ~ species + (1|site), REML = F, data = frustrum)
Anova(mod.A)
# check_model(mod.A)
ggpredict(mod.A, terms = c("species"))  %>% plot(add.data = TRUE)
# posthoc pairwise tukey HSD to determine what species had differences
x <- emmeans(mod.A, ~species)
y <- pairs(x, adjust="tukey")
# post hoc test for which species are different
# estimated marginal means
emms <- emmeans(mod.A, ~ species)
pairwise_comparisons_tukey <- pairs(emms, adjust = "tukey")
summary(pairwise_comparisons_tukey)
# Damage ~ traits
mod.B <- lmer(log(mp_damaged_kg) ~ dbh_cm + wd + (1|site), REML = F, data = frustrum)
Anova(mod.B)
#check_model(mod.B)
dam_dbh <- ggpredict(mod.B, terms = c("dbh_cm", "wd"))# %>% plot(add.data = TRUE)
# Damage ~ external factors
mod.C <- lmer(log(mp_damaged_kg) ~ fire*termite_pres + (1|site), data = frustrum)
Anova(mod.C)
#check_model(mod.C)
ggpredict(mod.C, terms = c("termite_pres"))  %>% plot(add.data = TRUE)
# Damage ~ species
sp <- ggplot(frustrum, aes(x = species, y = mp_damaged_kg, fill = species))+
geom_boxplot()+
theme_classic()+
scale_fill_manual(values = custom_colors)+
scale_x_discrete(labels = c("C. clarksoniana", "E. cullenii", "M. stenostachya")) +
xlab("") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")
# Damage ~ traits
frustrum$wd <- as.factor(frustrum$wd)
tr <- ggplot(frustrum, aes(x = dbh_cm, y = log(mp_damaged_kg), color = wd)) +
geom_jitter() +
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.7405'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.7405'),
inherit.aes=FALSE,  alpha=0.2, fill = low)+
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.8453'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.8453'),
inherit.aes=FALSE,  alpha=0.2, fill = mid) +
geom_line(aes(x=x, y=log(predicted)),
data=filter(dam_dbh, group=='0.977'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=log(conf.low), ymax=log(conf.high)),
data=filter(dam_dbh, group=='0.977'),
inherit.aes=FALSE,  alpha=0.2, fill = high) +
theme_classic() +
scale_color_manual(values = custom_colors_wd) +
xlab("Tree DBH (cm)") +
ylab("Total damaged biomass in lower stem (kg)")
# Damage ~ external factors
term <- ggplot(frustrum, aes(x = termite_pres, y = mp_damaged_kg, fill = termite_pres))+
geom_boxplot()+
theme_classic() +
xlab("External termite presence") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
fire <- ggplot(frustrum, aes(x = fire, y = mp_damaged_kg, fill = fire))+
geom_boxplot()+
theme_classic() +
xlab("External fire scarring") +
ylab("Total damaged biomass in lower stem (kg)")+
theme(legend.position = "none")+
scale_fill_manual(values = colors)
(sp+tr) / (term+fire) + plot_annotation(tag_levels = "a")
# binomial model - define coding
myrt$termite_num <- ifelse(myrt$termite_pres == "Y", 1, 0)
myrt$mound_num <- ifelse(myrt$mound == "Y", 1, 0)
myrt$runway_num <- ifelse(myrt$runway == "Y", 1, 0)
myrt$termitesampled_num <- ifelse(myrt$termite == "Y", 1, 0)
myrt$fire_num <- ifelse(myrt$fire == "Y", as.integer(1), as.integer(0))
myrt %>%
group_by(tree_site_ID, species, site) %>%
distinct(dbh_cm.x, wd, fire_num, termite_num, mound_num, runway_num, termitesampled_num)-> pp
contingency_table_term <- table(pp$species, pp$termite_num)
contingency_table_term
contingency_table_fire <- table(pp$species, pp$fire_num)
chi_fire <- chisq.test(contingency_table_fire, correct = TRUE)
contingency_table_fire
fisher.test(contingency_table_fire)
fisher.test(contingency_table_term)
pairwise_fisher_test(contingency_table_term)
contingency_table_term
library(rstatix)
fisher.test(contingency_table_term)
fisher_test(contingency_table_term)
pairwise_fisher_test(contingency_table_term) # correction - use bonferroni
contingency_table_term
fisher_test(contingency_table_fire)
fisher_test(contingency_table_term)
contingency_table_term
contingency_table_fire
