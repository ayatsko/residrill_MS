# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb$mp_damaged_prop <- frustrum_agb$mp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum_agb, cols = sp_damaged_kg:mp_damaged_kg)
# check normality assumptions
differences <- frustrum_agb$sp_damaged_kg - frustrum_agb$mp_damaged_kg
qqnorm(differences)
qqline(differences, col = "blue")
shapiro.test(differences) # breaks normality assumption
# nonparametric t-test
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
t
View(frus_v_d_out)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
View(frustrum)
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
View(dbh_resi_merge)
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
View(frustrum_agb)
View(frustrum_agb_long)
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
View(dbh_resi)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean", "drill_dbh_cm")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
View(dbh_resi_merge)
View(myrt)
# area of damage at dbh
dbh_resi_merge$dbh_damage_area_cm2 <- ((dbh_resi_merge$drill_dbh_cm * dbh_resi_merge$linear_mean)/2)^2 * pi
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
dbh_resi
View(dbh_resi)
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean", "drill_dbh_cm")]
View(dbh_resi_merge)
View(myrt)
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "drill_ID", "linear_mean", "drill_dbh_cm")]
x <- dbh_resi_merge$drill_ID
myrt$closest_dbh <- ifelse(myrt$drill_ID %in% x, "Y", "N")
table(myrt$closest_dbh)
# area of damage at dbh
myrt$dbh_damage_area_cm2 <- ifelse(myrt$closest_dbh == "Y",
((myrt$drill_dbh_cm * dbh_resi_merge$linear_mean)/2)^2 * pi,
NA)
# area of damage at dbh
myrt$dbh_damage_area_cm2 <- ifelse(myrt$closest_dbh == "Y",
((myrt$drill_dbh_cm * myrt$linear_mean)/2)^2 * pi,
NA)
# generate list of all trees
ids <- unique(myrt$tree_site_ID)
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume (with taper)
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# # function that calculates damaged frustrum volume (without taper)
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == y]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == y]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == Y]
# # function that calculates damaged frustrum volume (without taper)
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == Y]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == Y]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
# # function that calculates damaged frustrum volume (without taper)
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
myrt$dbh_damage_area_cm2[myrt$closest_dbh == "Y"]
min(myrt$drill_height_cm)
# # function that calculates damaged frustrum volume (without taper)
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
View(frus_v)
# # function that calculates damaged frustrum volume (without taper)
x <- myrt[myrt$tree_site_ID == "STCK-1", ]
x
View(x)
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
frus_v_out
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
frus_v_d_out
# remove STCK-1 from ids
ids <- ids[!ids %in% "STCK-1"]
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume (with taper)
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
frus_v_out
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
frus_v_d_out
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
frus_v_d_out <- do.call(rbind, frus_v_d)
frus_v_d_nt_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, frus_v_d_nt_out, by = "tree_site_ID")
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
View(frustrum)
x <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
View(x)
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_nt_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
x <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
View(frus_v_d_nt_out)
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3_nt = V)
return(output)
}
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_nt_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
x <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume (with taper)
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3_nt = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_nt_out <- do.call(rbind, frus_v_d)
View(frus_v_d_nt)
View(frus_v_d_nt_out)
View(frus_v_d_out)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
View(myrt)
x <- myrt[myrt$tree_site_ID == "PNW-44", ]
View(x)
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3_nt = V)
View(output)
return(output)
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_nt_out <- do.call(rbind, frus_v_d_nt)
View(frus_v_d_nt_out)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
x <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
View(x)
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
View(frustrum)
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
frustrum <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
frustrum$sp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3_nt)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "drill_ID", "linear_mean", "drill_dbh_cm")]
x <- dbh_resi_merge$drill_ID
myrt$closest_dbh <- ifelse(myrt$drill_ID %in% x, "Y", "N")
# area of damage at dbh
myrt$dbh_damage_area_cm2 <- ifelse(myrt$closest_dbh == "Y",
((myrt$drill_dbh_cm * myrt$linear_mean)/2)^2 * pi,
NA)
# generate list of all trees
ids <- unique(myrt$tree_site_ID)
# remove STCK-1 from ids
ids <- ids[!ids %in% "STCK-1"]
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume (with taper)
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged_revised[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
frus_d_nt <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
A4 <- x$dbh_damage_area_cm2[x$closest_dbh == "Y"]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3_nt = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum (taper) for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# calculate volume of damaged frustrum (no taper) for each tree
frus_v_d_nt <- lapply(ids, function(id) frus_d_nt(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_nt_out <- do.call(rbind, frus_v_d_nt)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
frustrum <- merge(frustrum, frus_v_d_nt_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
frustrum$sp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3_nt)/1000
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
# proportion of biomass damaged from single point and multi point estimate
frustrum$sp_damaged_prop <- frustrum$sp_damaged_kg/frustrum$undamaged_kg
frustrum$mp_damaged_prop <- frustrum$mp_damaged_kg/frustrum$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum, cols = sp_damaged_kg:mp_damaged_kg)
# check normality assumptions
differences <- frustrum_agb$sp_damaged_kg - frustrum_agb$mp_damaged_kg
qqnorm(differences)
qqline(differences, col = "blue")
shapiro.test(differences) # breaks normality assumption
# nonparametric t-test
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
View(frustrum_agb_long)
# check normality assumptions
differences <- frustrum_agb$sp_damaged_kg - frustrum_agb$mp_damaged_kg
differences
# check normality assumptions
differences <- frustrum$sp_damaged_kg - frustrum$mp_damaged_kg
qqnorm(differences)
qqline(differences, col = "blue")
shapiro.test(differences) # breaks normality assumption
# nonparametric t-test
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
# nonparametric t-test
t <- wilcox.test(frustrum$sp_damaged_kg, frustrum$mp_damaged_kg, paired = TRUE)
t
# visualization
frustrum_agb_long %>% group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) -> df
ggplot(df, aes(x = name, y = mean, fill = name))+
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.07)+
theme_classic()+
ylab("AGB in frustrum (kg)")+
xlab("")+
theme(legend.position="none")
